


addMdToPage(`## Hur f√∂r√§ndrades antal r√∂ster p√• de olika partierna fr√•n de olika √•ren?`)
//R√∂stresultat f√∂r varje parti i riksdagsvalen 2018 och 2022
dbQuery.use('riksdagsval-neo4j');
let electionResults =
  await dbQuery('MATCH (p:Partiresultat) RETURN "2018" AS year, p.parti AS parti, SUM(p.roster2018) AS r√∂ster UNION ALL MATCH(p: Partiresultat) RETURN "2022" AS year, p.parti AS parti,SUM(p.roster2022) AS r√∂ster ORDER BY year, parti; ');
console.log('electionResults from neo4j', electionResults);
tableFromData({ data: electionResults });

let dataForChart = (await dbQuery(`
  MATCH (p:Partiresultat) RETURN p.parti AS parti, SUM(p.roster2018) AS r√∂ster2018, SUM(p.roster2022) AS r√∂ster2022
  ORDER BY parti;
`)).map(x => ({
  parti: x.parti,
  r√∂ster2018: +x.r√∂ster2018, // S√§kerst√§ll att v√§rdena √§r numeriska
  r√∂ster2022: +x.r√∂ster2022
}));

drawGoogleChart({
  type: 'ColumnChart',
  data: makeChartFriendly(dataForChart, 'parti', 'r√∂ster2018', 'r√∂ster2022'),
  options: {
    height: 500,
    chartArea: { left: 80, right: 0 },
    vAxis: { title: 'Antal r√∂ster', format: '#' },
    hAxis: { title: 'Partier' },
    title: 'J√§mf√∂relse av r√∂stresultat per parti mellan 2018 och 2022',
    legend: { position: 'bottom' },
    bar: { groupWidth: '80%' }
  }
});






/*
dbQuery.use('riksdagsval-neo4j');
let rawResults = await dbQuery('MATCH (n:Partiresultat) RETURN n ');
//rawResults = rawResults.map(x => ({ ...x, ids: x.ids.identity }));
rawResults = rawResults.map(({ roster2018, kommun, roster2022, parti, labels }) => ({ roster2018, kommun, roster2022, parti, labels }));
console.log('üîç rawResults:', rawResults);
tableFromData({ data: rawResults, columnNames: ['R√∂ster 2018', 'KOMMUN', 'R√∂ster 2022', 'Parti', 'Taggat som'] });
*/



/*
dbQuery.use('counties-sqlite');
let countyInfo = await dbQuery('SELECT * FROM countyInfo');
console.log('countyInfo', countyInfo);
tableFromData({ data: countyInfo });
*/


addMdToPage(`## Antal arbetsl√∂sa per kommun i augusti 2022.`)
dbQuery.use('arbetsl√∂sa_2022.db');
let arbetsl√∂saInfo = await dbQuery('SELECT Region, √Ölder, arbetsl√∂saAug2022 FROM arbetsl√∂shet LIMIT 25');
console.log('arbetsl√∂saInfo', arbetsl√∂saInfo);
tableFromData({ data: arbetsl√∂saInfo });






/*
dbQuery.use('geo-mysql');
let geoData = await dbQuery('SELECT * FROM geoData LIMIT 25');
console.log('geoData from mysql', geoData);
tableFromData({ data: geoData });


dbQuery.use('kommun-info-mongodb');
let income = await dbQuery.collection('incomeByKommun').find({}).limit(25);
console.log('income from mongodb', income);
tableFromData({ data: income });

dbQuery.use('kommun-info-mongodb');
let ages = await dbQuery.collection('ageByKommun').find({}).limit(25);
console.log('ages from mongodb', ages);
tableFromData({ data: ages });
*/
